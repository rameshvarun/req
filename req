#!/usr/bin/env python3
import sys
import requests
import click

from extractors import extractors
from importers import pocket_import

from config import DATA_FOLDER

from entry import get_entries, load_entry
from operator import attrgetter

from urlifiers import urlify

from datetime import timedelta
from typing import *

@click.command()
@click.argument('urls', nargs=-1)
def save(urls: List[str]):
    """Save URLs to read later."""

    if len(urls) == 0:
        raise click.BadParameter("No urls provided.")

    for url in urls:
        res = requests.get(url)
        extracted = [e(res) for e in extractors]
        extracted = [e for e in extracted if e is not None]
        entry = max(extracted, key=lambda e: len(e.resource_type.split('/')))
        entry.save()
        print(f"{url} saved with handle {entry.handle}.")

def print_entry(entry):
    if entry.title:
        print(f"{entry.handle} - {entry.title}")
        print(f"URL: {urlify(entry)}")
    else:
        print(f"{entry.handle} - {urlify(entry)}")

    if entry.summary:
        print(f"Summary: {entry.summary}")

@click.command("list")
def list_unread():
    entries = get_entries()
    unread = sorted([e for e in entries if not e.read], key=attrgetter('time_added'), reverse=True)
    print (f"===== {len(unread)} Unread Links =====")
    for entry in unread:
        print_entry(entry)
        print("-----")

@click.command("archive")
def archive():
    entries = get_entries()
    read = sorted([e for e in entries if e.read], key=attrgetter('time_added'), reverse=True)
    print (f"===== {len(read)} Read Links =====")
    for entry in read:
        print_entry(entry)
        print("-----")

@click.command("edit")
@click.argument('handle')
def edit(handle):
    """Edit an articles YAML file."""
    click.edit(filename=DATA_FOLDER / f"{handle}.yml")

@click.command("mark")
@click.argument('handle')
def mark(handle):
    """Mark an article as read."""
    entry = load_entry(DATA_FOLDER / f"{handle}.yml")
    entry.read = True
    entry.save()

@click.group(invoke_without_command=True)
@click.pass_context
def cli(ctx):
    if ctx.invoked_subcommand is None:
        list_unread()

cli.add_command(pocket_import)
cli.add_command(save)
cli.add_command(list_unread)
cli.add_command(edit)
cli.add_command(mark)
cli.add_command(archive)

if __name__ == '__main__':
    cli()
